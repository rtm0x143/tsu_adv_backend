// <auto-generated />
using System;
using Auth.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Auth.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20230413150521_UserHierarchy")]
    partial class UserHierarchy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Auth.Infra.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0294cc6b-bee5-4fd8-92a9-5c3f7da6de0b"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("7e63d4dc-c365-45f8-9bd5-3e83d9f571bc"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("3a582199-77b1-4352-a61a-fce564ebb8d4"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("59eebf24-ad0f-4bcb-b514-4c72376253ec"),
                            Name = "Cook",
                            NormalizedName = "COOK"
                        },
                        new
                        {
                            Id = new Guid("89efd21c-aa39-449a-97b2-474646701433"),
                            Name = "Courier",
                            NormalizedName = "COURIER"
                        },
                        new
                        {
                            Id = new Guid("761a9b67-f1e1-49b0-9a84-38e40be52d19"),
                            Name = "RestaurantOwner",
                            NormalizedName = "RESTAURANTOWNER"
                        },
                        new
                        {
                            Id = new Guid("33d4a50c-3a9d-4c24-a4a7-4f2dbb64ad82"),
                            Name = "RestaurantAdmin",
                            NormalizedName = "RESTAURANTADMIN"
                        });
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Grant",
                            ClaimValue = "Cook",
                            RoleId = new Guid("761a9b67-f1e1-49b0-9a84-38e40be52d19")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Grant",
                            ClaimValue = "Manager",
                            RoleId = new Guid("761a9b67-f1e1-49b0-9a84-38e40be52d19")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Grant",
                            ClaimValue = "Courier",
                            RoleId = new Guid("761a9b67-f1e1-49b0-9a84-38e40be52d19")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Grant",
                            ClaimValue = "RestaurantAdmin",
                            RoleId = new Guid("761a9b67-f1e1-49b0-9a84-38e40be52d19")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Grant",
                            ClaimValue = "Cook",
                            RoleId = new Guid("33d4a50c-3a9d-4c24-a4a7-4f2dbb64ad82")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Grant",
                            ClaimValue = "Manager",
                            RoleId = new Guid("33d4a50c-3a9d-4c24-a4a7-4f2dbb64ad82")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Grant",
                            ClaimValue = "Courier",
                            RoleId = new Guid("33d4a50c-3a9d-4c24-a4a7-4f2dbb64ad82")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.Admin", b =>
                {
                    b.HasBaseType("Auth.Infra.Data.Entities.AppUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.Cook", b =>
                {
                    b.HasBaseType("Auth.Infra.Data.Entities.AppUser");

                    b.HasDiscriminator().HasValue("Cook");
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.Courier", b =>
                {
                    b.HasBaseType("Auth.Infra.Data.Entities.AppUser");

                    b.HasDiscriminator().HasValue("Courier");
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.Customer", b =>
                {
                    b.HasBaseType("Auth.Infra.Data.Entities.AppUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.Manager", b =>
                {
                    b.HasBaseType("Auth.Infra.Data.Entities.AppUser");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.RestaurantAdmin", b =>
                {
                    b.HasBaseType("Auth.Infra.Data.Entities.AppUser");

                    b.HasDiscriminator().HasValue("RestaurantAdmin");
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.RestaurantOwner", b =>
                {
                    b.HasBaseType("Auth.Infra.Data.Entities.AppUser");

                    b.HasDiscriminator().HasValue("RestaurantOwner");
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.RestaurantAssociationUserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.HasIndex("RestaurantId");

                    b.HasDiscriminator().HasValue("RestaurantAssociationUserClaim");
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.AppUserRole", b =>
                {
                    b.HasOne("Auth.Infra.Data.Entities.RoleEntity", "Role")
                        .WithMany("AssociatedUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.Infra.Data.Entities.AppUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("Auth.Infra.Data.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Auth.Infra.Data.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Auth.Infra.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Auth.Infra.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Auth.Infra.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.RestaurantAssociationUserClaim", b =>
                {
                    b.HasOne("Auth.Infra.Data.Entities.Restaurant", null)
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Auth.Infra.Data.Entities.RoleEntity", b =>
                {
                    b.Navigation("AssociatedUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
